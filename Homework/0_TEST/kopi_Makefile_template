## Makefile â€“ template ##

# Locate the C# compiler: try 'csc' (dotnet SDK) first, otherwise 'mcs' (Mono)
CS := $(shell command -v csc 2>/dev/null || command -v mcs 2>/dev/null)
ifndef CS
$(error No C# compiler found)
endif

# Determine how to run the program and which compilation flags to use
ifeq ($(notdir $(CS)),mcs)
    RUN     = mono $(EXE)
    CSTARGET= -target:exe
else
    
    RUN     = ./$(EXE)
    CSTARGET= -target:exe -langversion:latest
endif

# Output file names and plotting script
EXE     := main.exe
OUT     := Out.txt
GNUPLOT := plot.gpi

# Data and plot files
DATA 	:= XXX.txt YYY.txt
PLOTS   := XXX.svg YYY.svg

# Source files and external dependencies
SRC     := Main.cs
GENERAL := ../../General/Vector_and_Matrix.cs \
           ../../General/HW_points.cs

CSFILES := $(SRC) $(GENERAL) # All source files to compile

# Declare these as phony targets (not real files)
.PHONY: all run plots clean

# Default target: build the program and generate all plots
all: $(OUT) $(PLOTS)

# Build the executable
$(EXE): $(CSFILES)
	$(CS) $(CSTARGET) -out:$@ $(CSFILES)

# Run the program to generate Out.txt and data files
$(OUT) $(DATA): $(EXE)
	$(RUN)

# Generate plot
XXX.svg: XXX.txt $(GNUPLOT)
	@gnuplot -e "set terminal svg background 'white'; \
	            set output '$@';                      \
	            load '$(GNUPLOT)'"

# Generate plot
YYY.svg: YYY.txt $(GNUPLOT)
	@gnuplot -e "set terminal svg background 'white'; \
	            set output '$@';                      \
	            load '$(GNUPLOT)'"

run: $(EXE)
	$(RUN)
	@echo "------------------------------------------------"
	@cat $(OUT)

# Cleanup rule to delete generated files
RM ?= rm

clean:
	-$(RM) -f $(EXE) *.dll $(OUT) $(DATA) $(PLOTS)