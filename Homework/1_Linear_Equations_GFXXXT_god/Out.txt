--- PART A ---
-- Check that "decomp" works as intended --
Generate a random tall (6x4) matrix A: 

     0.249      0.111      0.467      0.772 
     0.658      0.433      0.354      0.944 
     0.101      0.642      0.029      0.248 
     0.320      0.990      0.682      0.655 
     0.283      0.615      0.704      0.702 
     0.950      0.093      0.161      0.382 

factorize it into QR, its yielded: 

Q:

     0.197     -0.033      0.583      0.466 
     0.522      0.031     -0.082      0.616 
     0.080      0.491     -0.606      0.287 
     0.254      0.673      0.079     -0.340 
     0.224      0.376      0.489     -0.209 
     0.753     -0.404     -0.204     -0.402 

R:

     1.261      0.759      0.732      1.276 
     0.000      1.185      0.668      0.676 
     0.000      0.000      0.591      0.539 
     0.000      0.000      0.000      0.489 

Check that R is upper triangular: 

True

Q^T * Q yields:

         1          0  3.331E-16 -5.551E-17 
         0          1  1.665E-16  1.943E-16 
 3.331E-16  1.665E-16          1 -6.939E-17 
-5.551E-17  1.943E-16 -6.939E-17          1 
Check that Q^T Q=1: 

Is Q^T * Q is equas the identity matrix (within a tolerance of 1e-12)?
True

Check that QR=A: 

QR yields:

     0.249      0.111      0.467      0.772 
     0.658      0.433      0.354      0.944 
     0.101      0.642      0.029      0.248 
     0.320      0.990      0.682      0.655 
     0.283      0.615      0.704      0.702 
     0.950      0.093      0.161      0.382 

Is QR = A (within a tolerance of 1e-12)?
True

-- Check that "solve" works as intended --
Generate a random square matrix A (4x4):

     0.404      0.166      0.985      0.109 
     0.802      0.446      0.225      0.011 
     0.029      0.008      0.510      0.382 
     0.703      0.235      0.731      0.089 

Generate a random vector b (4):
     0.771
     0.307
     0.765
     0.279

Solve QRx=b, its yields x=
    -1.639
     3.208
     0.805
     0.988

Check that Ax=b. Ax yields:
     0.771
     0.307
     0.765
     0.279

Is Ax = b (within a tolerance of 1e-12)?
True

--- PART B ---
-- Check that "inverse" works as intended --
Generate a random square matrix A (4x4):

     0.294      0.698      0.865      0.198 
     0.560      0.181      0.250      0.947 
     0.349      0.380      0.502      0.809 
     0.695      0.030      0.082      0.904 

Factorize A into QR. Calculate the inverse B:

    1.5323     0.7079    -3.2991     1.8761 
    7.0554    76.3803   -43.2032   -42.9005 
   -4.8298   -62.4268    35.7929    34.4257 
   -0.9760     2.5650     0.7341    -2.0247 

Check that AB=I, where I is the identity matrix:

    1.0000     0.0000     0.0000     0.0000 
    0.0000     1.0000     0.0000     0.0000 
    0.0000     0.0000     1.0000     0.0000 
    0.0000     0.0000     0.0000     1.0000 

Is A*B = I (within a tolerance of 1e-12)?
True

--- PART C ---
 The time it takes to QR-factorize a random NxN matrix (as a function of N) is recorded in times.txt and plotted in times_plot.png. The time complexity follows O(NÂ³)
