------------ TASK A: Ordinary least-squares fit by QR-decomposition ------------

------ Make sure that your QR-decomposition routines work for tall matrices ------
------ (A tall matrix of size n×m is one where n>m)                         ------

Below, I check that my QR decomposition routines work for tall matrices:

Check part 1) Generate a random tall (6x4) matrix A:

Matrix A:
      0.56813      0.14501      0.14254      0.33096
      0.45801      0.52681      0.55563      0.28168
      0.28476      0.96688      0.62917      0.44683
      0.43063      0.80986      0.41863      0.87325
      0.09487      0.97709      0.59578      0.94767
      0.81975      0.94591      0.79640      0.49189

Check part 2) Decompose A into Q and R:

Matrix Q:
      0.46699     -0.44908     -0.33890      0.26831
      0.37648     -0.02857      0.61877      0.31689
      0.23406      0.50238      0.00903     -0.63382
      0.35397      0.22904     -0.66830      0.09060
      0.07798      0.70021      0.03620      0.59212
      0.67381     -0.04866      0.23290     -0.25896

Matrix R:
      1.21658      1.49259      1.15428      1.07963
      0.00000      1.22919      0.71049      0.90744
      0.00000      0.00000      0.22846     -0.36856
      0.00000      0.00000      0.00000      0.40772

Check part 3) Check that R is upper triangular:

TEST: Is R upper‑triangular? RESULT: Yes.

Check part 4) Check that QᵀQ ≈ I:

TEST: is QᵀQ the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

Check part 5) Check that QR ≈ A:

Matrix QR:
      0.56813      0.14501      0.14254      0.33096
      0.45801      0.52681      0.55563      0.28168
      0.28476      0.96688      0.62917      0.44683
      0.43063      0.80986      0.41863      0.87325
      0.09487      0.97709      0.59578      0.94767
      0.81975      0.94591      0.79640      0.49189

TEST: is QR = A?
RESULT: Yes  (|maximum difference| = 1.110E-016)

------ Implement a routine that makes a least-squares fit (using your QR-decomposition routines) ------
------ The routine must calculate and return the vector of the best fit coefficients, {c_k}      ------

Best‑fit coefficients:
   ln(a)  = 4.95866486265
   λ     = 0.17062404951

Full data‑versus‑fit table written to “Fit_the_ThX_data_with_exponential_function.txt”.


------ Fit the ThX data with exponential function in the usual logarithmic way ------

Radioactive decay follows: y(t)=a*exp(-λt)
where y is the activity, t is time, a is the activity at t=0, and λ is the decay constant.
The uncertainty of the measurement is denoted as δy.

The uncertainty of the logarithm is: δln(y)=δy/y

------ Plot the experimental data (with error-bars) and your best fit ------

SVG figure saved as “Rutherford_and_Soddys_ThX.svg”.


------ From your fit find out the half-life time, T_{1/2}=ln(2)/λ, of ThX ------

T_1/2  = 4.06242 ± 0.0705374 days

------ Compare your result for ThX with the modern value ------
------ (ThX is known today as 224Ra)                     ------

Modern value : 3.6313 days
The modern value lies **outside** the 1 σ uncertainty of the fit.


------------ TASK B: Uncertainties of the fitting coefficients ------------


------ Modify you least-squares fitting function such that it also calculates  ------
------ the covariance matrix and the uncertainties of the fitting coefficients ------

The covariance matrix of (ln a, λ):

Matrix :
      0.00021      0.00003
      0.00003      0.00001

Uncertainty on ln a : 0.0146553
Uncertainty on λ    : 0.00296261

Propagated uncertainty on half‑life: ±0.0705374 days

Half‑life does **not** agree with the modern value within its uncertainty.


------ Estimate the uncertainty of the half-life value for ThX from the given data ------
------ does it agree with the modern value within the estimated uncertainty?       ------


------------ TASK C: Evaluation of the quality of the uncertainties on the fit coefficients ------------


------ Plot your best fit, together with the fits where you change the fit coefficients ------
------ by the estimated uncertainties δc in different combinations                      ------

SVG figure with curves for c ± δc saved as “best_fit_with_changed_coefficients.svg”.

