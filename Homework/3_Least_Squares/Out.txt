------------ TASK A: Ordinary least-squares fit by QR-decomposition ------------

------ Make sure that your QR-decomposition routines work for tall matrices ------
------ (A tall matrix of size n×m is one where n>m)                         ------

Below, I check that my QR decomposition routines work for tall matrices:

Check part 1) Generate a random tall (6x4) matrix A:

Matrix A:
      0.04174      0.12709      0.35349      0.51754
      0.41513      0.65048      0.26687      0.66125
      0.40919      0.53855      0.32826      0.90002
      0.60743      0.72235      0.32705      0.38445
      0.04001      0.64430      0.40542      0.39988
      0.48805      0.58222      0.75118      0.79875

Check part 2) Decompose A into Q and R:

Matrix Q:
      0.04282      0.11819      0.53879      0.32314
      0.42585      0.17435     -0.32750      0.29782
      0.41976      0.00440     -0.07052      0.69471
      0.62312     -0.11928     -0.32884     -0.47491
      0.04104      0.96580      0.02010     -0.17988
      0.50065     -0.09282      0.69924     -0.25760

Matrix R:
      0.97482      1.27656      0.86308      1.33742
      0.00000      0.61287      0.37257      0.44662
      0.00000      0.00000      0.50577      0.43896
      0.00000      0.00000      0.00000      0.52915

Check part 3) Check that R is upper triangular:

TEST: Is R upper‑triangular? RESULT: Yes.

Check part 4) Check that QᵀQ ≈ I:

TEST: is QᵀQ the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

Check part 5) Check that QR ≈ A:

Matrix QR:
      0.04174      0.12709      0.35349      0.51754
      0.41513      0.65048      0.26687      0.66125
      0.40919      0.53855      0.32826      0.90002
      0.60743      0.72235      0.32705      0.38445
      0.04001      0.64430      0.40542      0.39988
      0.48805      0.58222      0.75118      0.79875

TEST: is QR = A?
RESULT: Yes  (|maximum difference| = 1.110E-016)

------ Implement a routine that makes a least-squares fit (using your QR-decomposition routines) ------
------ The routine must calculate and return the vector of the best fit coefficients, {c_k}      ------

Best‑fit coefficients:
   ln(a)  = 4.95866486265
   λ     = 0.17062404951

Full data‑versus‑fit table written to “Fit_the_ThX_data_with_exponential_function.txt”.


------ Fit the ThX data with exponential function in the usual logarithmic way ------

Radioactive decay follows: y(t)=a*exp(-λt)
where y is the activity, t is time, a is the activity at t=0, and λ is the decay constant.
The uncertainty of the measurement is denoted as δy.

The uncertainty of the logarithm is: δln(y)=δy/y

------ Plot the experimental data (with error-bars) and your best fit ------

SVG figure saved as “Rutherford_and_Soddys_ThX.svg”.


------ From your fit find out the half-life time, T_{1/2}=ln(2)/λ, of ThX ------

T_1/2  = 4.06242 ± 0.0705374 days

------ Compare your result for ThX with the modern value ------
------ (ThX is known today as 224Ra)                     ------

Modern value : 3.6313 days
The modern value lies **outside** the 1 σ uncertainty of the fit.


------------ TASK B: Uncertainties of the fitting coefficients ------------


------ Modify you least-squares fitting function such that it also calculates  ------
------ the covariance matrix and the uncertainties of the fitting coefficients ------

The covariance matrix of (ln a, λ):

Matrix :
      0.00021      0.00003
      0.00003      0.00001

Uncertainty on ln a : 0.0146553
Uncertainty on λ    : 0.00296261

Propagated uncertainty on half‑life: ±0.0705374 days

Half‑life does **not** agree with the modern value within its uncertainty.


------ Estimate the uncertainty of the half-life value for ThX from the given data ------
------ does it agree with the modern value within the estimated uncertainty?       ------


------------ TASK C: Evaluation of the quality of the uncertainties on the fit coefficients ------------


------ Plot your best fit, together with the fits where you change the fit coefficients ------
------ by the estimated uncertainties δc in different combinations                      ------

SVG figure with curves for c ± δc saved as “best_fit_with_changed_coefficients.svg”.

