------------ TASKÂ A: Jacobi diagonalization with cyclic sweeps ------------

------ Prove that the implementation works as intended ------

--- Generate a random symmetric matrix A (5x5) ---

Matrix A:
      0.64135      0.26042      0.47629      0.55239      0.67068
      0.26042      0.60739      0.46549      0.53673      0.50220
      0.47629      0.46549      0.58553      0.44881      0.34721
      0.55239      0.53673      0.44881      0.81714      0.21985
      0.67068      0.50220      0.34721      0.21985      0.74022


--- Apply your routine to perform the eigenvalue-decomposition, A=VDVáµ€ ---
--- (where V is the orthogonal matrix of eigenvectors                  ---
--- and D is the diagonal matrix with the corresponding eigenvalues)   ---

The orthogonal matrix V of eigenvectors:

Matrix V:
      0.59523     -0.02380     -0.58844     -0.27278      0.47378
      0.46764      0.20821      0.72555      0.17549      0.42513
     -0.20180     -0.86793      0.09870      0.14778      0.41761
     -0.36465      0.38413     -0.30389      0.63894      0.46785
     -0.50331      0.23501      0.15881     -0.68170      0.44890


The diagonal matrix D with the corresponding eigenvalues:

Matrix D:
     -0.22105      0.00000      0.00000      0.00000      0.00000
      0.00000      0.19427      0.00000      0.00000      0.00000
      0.00000      0.00000      0.34462      0.00000      0.00000
      0.00000      0.00000      0.00000      0.59798      0.00000
      0.00000      0.00000      0.00000      0.00000      2.47581


The vector w of the eigenvalues:

Vector w:
     -0.22105
      0.19427
      0.34462
      0.59798
      2.47581


The matrix Váµ€ (which is the transpose of V)

Matrix Váµ€:
      0.59523      0.46764     -0.20180     -0.36465     -0.50331
     -0.02380      0.20821     -0.86793      0.38413      0.23501
     -0.58844      0.72555      0.09870     -0.30389      0.15881
     -0.27278      0.17549      0.14778      0.63894     -0.68170
      0.47378      0.42513      0.41761      0.46785      0.44890


--- Check that Váµ€AVâ‰ˆD ---

Matrix Váµ€AV:
     -0.22105      0.00000      0.00000      0.00000      0.00000
      0.00000      0.19427      0.00000      0.00000      0.00000
      0.00000      0.00000      0.34462      0.00000      0.00000
      0.00000      0.00000      0.00000      0.59798      0.00000
      0.00000      0.00000      0.00000      0.00000      2.47581

TEST: is Váµ€AV=D (within a tolerance of 1E-05)?
RESULT: Yes.

--- Check that VDVáµ€â‰ˆA ---

Matrix VDVáµ€:
      0.64135      0.26042      0.47629      0.55239      0.67068
      0.26042      0.60739      0.46549      0.53673      0.50220
      0.47629      0.46549      0.58553      0.44881      0.34721
      0.55239      0.53673      0.44881      0.81714      0.21985
      0.67068      0.50220      0.34721      0.21985      0.74022

TEST: is VDVáµ€=A (within a tolerance of 1E-05)?
RESULT: Yes.

--- Check that Váµ€Vâ‰ˆI ---

Matrix Váµ€V:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

TEST: is Váµ€V the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

--- Check that VVáµ€â‰ˆI ---

Matrix VVáµ€:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

TEST: is VVáµ€ the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

------------ TASK B: Hydrogen atom, s-wave radial SchrÃ¶dinger equation on a grid -----------

------ Calculate numerically the lowest egenvalues and eigenfunctions ------
------ of the s-wave states in the hydrogen atom                      ------
------ and compare them with the exact results                        ------

Numerically calculated lowest eigenvalues:
Îµ_0 = -0.489228
Îµ_1 = -0.111120
Îµ_2 = 0.096284
Îµ_3 = 0.411759
Îµ_4 = 0.829649

numerically_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the numerically calculated eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg is a plot of the numerically calculated eigenfunctions.

analytic_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the (exact) analytically computed eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg also contains the exact results for comparison.

------ Fix r_max and calculate Îµâ‚€ for several different values of Î”r ------
------ and plot the resulting curve                                  ------

r_max is fixed to 10.
varying_dr.txt contains the data for the calculated Îµâ‚€.
varying_dr.svg is a plot of the resulting curve.

------ Fix Î”r and calculate Îµâ‚€ for several different values of r_max ------
------ and plot the resulting curve                                  ------


Î”r is fixed to 0.3.
varying_rmax.txt contains the data for the calculated Îµâ‚€.
varying_rmax.svg is a plot of the resulting curve.

------------ TASK C: Scaling and optimization ------------

------ Check that the number of operations for matrix diagonalization scales as O(nÂ³) ------
------ do the measurements in parallel                                                ------

The file 'number_of_operations.txt' contains timing data for Jacobi diagonalization of random matrices of size N.
The plot 'number_of_operations.svg' shows the data along with a fitted curve f(N) = a * NÂ³.

Timing data are written by NumberOfOperations.exe to number_of_operations.txt.

------------ POINTS: received from tasks A, B, and C ------------

Task A completed â†’ 6 pointsðŸ˜Š
Task B completed â†’ 3 pointsðŸ˜„
Task C completed â†’ 1 point ðŸ˜Ž

In total, this exercise results in 10 points ðŸŽ‰ðŸŽ‰ðŸŽ‰
