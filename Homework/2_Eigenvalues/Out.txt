------------ TASKÂ A: Jacobi diagonalization with cyclic sweeps ------------

------ Prove that the implementation works as intended ------

--- Generate a random symmetric matrix A (5x5) ---

Matrix A:
      0.43431      0.20311      0.66941      0.49145      0.80040
      0.20311      0.60643      0.66115      0.30740      0.69118
      0.66941      0.66115      0.15339      0.55670      0.54111
      0.49145      0.30740      0.55670      0.63413      0.75811
      0.80040      0.69118      0.54111      0.75811      0.17303


--- Apply your routine to perform the eigenvalue-decomposition, A=VDVáµ€ ---
--- (where V is the orthogonal matrix of eigenvectors                  ---
--- and D is the diagonal matrix with the corresponding eigenvalues)   ---

The orthogonal matrix V of eigenvectors:

Matrix V:
      0.47160      0.10581     -0.64583      0.39453      0.44004
      0.37945      0.13421      0.08181     -0.81393      0.41089
     -0.37549     -0.79462     -0.17635     -0.10661      0.43026
      0.25181     -0.08650      0.73758      0.41168      0.46434
     -0.65513      0.57610     -0.03294      0.03192      0.48663


The diagonal matrix D with the corresponding eigenvalues:

Matrix D:
     -0.78473      0.00000      0.00000      0.00000      0.00000
      0.00000     -0.37912      0.00000      0.00000      0.00000
      0.00000      0.00000      0.07094      0.00000      0.00000
      0.00000      0.00000      0.00000      0.41198      0.00000
      0.00000      0.00000      0.00000      0.00000      2.68222


The vector w of the eigenvalues:

Vector w:
     -0.78473
     -0.37912
      0.07094
      0.41198
      2.68222


The matrix Váµ€ (which is the transpose of V)

Matrix Váµ€:
      0.47160      0.37945     -0.37549      0.25181     -0.65513
      0.10581      0.13421     -0.79462     -0.08650      0.57610
     -0.64583      0.08181     -0.17635      0.73758     -0.03294
      0.39453     -0.81393     -0.10661      0.41168      0.03192
      0.44004      0.41089      0.43026      0.46434      0.48663


--- Check that Váµ€AVâ‰ˆD ---

Matrix Váµ€AV:
     -0.78473      0.00000      0.00000      0.00000      0.00000
      0.00000     -0.37912      0.00000      0.00000      0.00000
      0.00000      0.00000      0.07094      0.00000      0.00000
      0.00000      0.00000      0.00000      0.41198      0.00000
      0.00000      0.00000      0.00000      0.00000      2.68222

TEST: is Váµ€AV = D?
RESULT: Yes  (|maximum difference| = 6.762E-009)

--- Check that VDVáµ€â‰ˆA ---

Matrix VDVáµ€:
      0.43431      0.20311      0.66941      0.49145      0.80040
      0.20311      0.60643      0.66115      0.30740      0.69118
      0.66941      0.66115      0.15339      0.55670      0.54111
      0.49145      0.30740      0.55670      0.63413      0.75811
      0.80040      0.69118      0.54111      0.75811      0.17303

TEST: is VDVáµ€ = A?
RESULT: Yes  (|maximum difference| = 4.251E-009)

--- Check that Váµ€Vâ‰ˆI ---

Matrix Váµ€V:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

TEST: is Váµ€V the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

--- Check that VVáµ€â‰ˆI ---

Matrix VVáµ€:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

TEST: is VVáµ€ the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

------------ TASK B: Hydrogen atom, s-wave radial SchrÃ¶dinger equation on a grid -----------

------ Calculate numerically the lowest egenvalues and eigenfunctions ------
------ of the s-wave states in the hydrogen atom                      ------
------ and compare them with the exact results                        ------

Numerically calculated lowest eigenvalues:
Îµ_0 = -0.489228
Îµ_1 = -0.111120
Îµ_2 = 0.096284
Îµ_3 = 0.411759
Îµ_4 = 0.829649

numerically_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the numerically calculated eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg is a plot of the numerically calculated eigenfunctions.

analytic_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the (exact) analytically computed eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg also contains the exact results for comparison.

------ Fix r_max and calculate Îµâ‚€ for several different values of Î”r ------
------ and plot the resulting curve                                  ------

r_max is fixed to 10.
varying_dr.txt contains the data for the calculated Îµâ‚€.
varying_dr.svg is a plot of the resulting curve.

------ Fix Î”r and calculate Îµâ‚€ for several different values of r_max ------
------ and plot the resulting curve                                  ------


Î”r is fixed to 0.3.
varying_rmax.txt contains the data for the calculated Îµâ‚€.
varying_rmax.svg is a plot of the resulting curve.

------------ TASK C: Scaling and optimization ------------

------ Check that the number of operations for matrix diagonalization scales as O(nÂ³) ------
------ do the measurements in parallel                                                ------

The file 'number_of_operations.txt' contains timing data for Jacobi diagonalization of random matrices of size N.
The plot 'number_of_operations.svg' shows the data along with a fitted curve f(N) = a * NÂ³.


------------ POINTS: received from tasks A, B, and C ------------

Task A completed â†’ 6 pointsðŸ˜Š
Task B completed â†’ 3 pointsðŸ˜„
Task C completed â†’ 1 point ðŸ˜Ž

In total, this exercise results in 10 points ðŸŽ‰ðŸŽ‰ðŸŽ‰
