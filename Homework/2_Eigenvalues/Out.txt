------------ TASKÂ A: Jacobi diagonalization with cyclic sweeps ------------

------ Prove that the implementation works as intended ------

--- Generate a random symmetric matrix A (5x5) ---

Matrix A:
      0.58239      0.82811      0.04169      0.00991      0.83147
      0.82811      0.48324      0.12535     -0.36107     -0.07924
      0.04169      0.12535      0.53742      0.13872      0.10850
      0.00991     -0.36107      0.13872      0.22102     -0.09033
      0.83147     -0.07924      0.10850     -0.09033     -0.63653


--- Apply your routine to perform the eigenvalue-decomposition, A=VDVáµ€ ---
--- (where V is the orthogonal matrix of eigenvectors                  ---
--- and D is the diagonal matrix with the corresponding eigenvalues)   ---

The orthogonal matrix V of eigenvectors:

Matrix V:
      0.50560     -0.15539     -0.43307      0.04456      0.72848
     -0.31553      0.58880      0.41773     -0.13387      0.60111
      0.06976     -0.16550      0.41406      0.88576      0.10825
     -0.13796      0.62497     -0.61303      0.43400     -0.16192
     -0.78798     -0.45955     -0.30116      0.08463      0.26466


The diagonal matrix D with the corresponding eigenvalues:

Matrix D:
     -1.22719      0.00000      0.00000      0.00000      0.00000
      0.00000     -0.09194      0.00000      0.00000      0.00000
      0.00000      0.00000      0.33598      0.00000      0.00000
      0.00000      0.00000      0.00000      0.59891      0.00000
      0.00000      0.00000      0.00000      0.00000      1.57176


The vector w of the eigenvalues:

Vector w:
     -1.22719
     -0.09194
      0.33598
      0.59891
      1.57176


The matrix Váµ€ (which is the transpose of V)

Matrix Váµ€:
      0.50560     -0.31553      0.06976     -0.13796     -0.78798
     -0.15539      0.58880     -0.16550      0.62497     -0.45955
     -0.43307      0.41773      0.41406     -0.61303     -0.30116
      0.04456     -0.13387      0.88576      0.43400      0.08463
      0.72848      0.60111      0.10825     -0.16192      0.26466


--- Check that Váµ€AVâ‰ˆD ---

Matrix Váµ€AV:
     -1.22719      0.00000      0.00000      0.00000      0.00000
      0.00000     -0.09194      0.00000      0.00000      0.00000
      0.00000      0.00000      0.33598      0.00000      0.00000
      0.00000      0.00000      0.00000      0.59891      0.00000
      0.00000      0.00000      0.00000      0.00000      1.57176

Váµ€AV â‰ˆ D (tol=1E-06).

--- Check that VDVáµ€â‰ˆA ---

Matrix VDVáµ€:
      0.58239      0.82811      0.04169      0.00991      0.83147
      0.82811      0.48324      0.12535     -0.36107     -0.07924
      0.04169      0.12535      0.53742      0.13872      0.10850
      0.00991     -0.36107      0.13872      0.22102     -0.09033
      0.83147     -0.07924      0.10850     -0.09033     -0.63653

VDVáµ€ â‰ˆ A (tol=1E-06).

--- Check that Váµ€Vâ‰ˆI ---

Matrix Váµ€V:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

Váµ€V â‰ˆ I (tol=1E-06).

--- Check that VVáµ€â‰ˆI ---

Matrix VVáµ€:
      1.00000      0.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      0.00000      1.00000

VVáµ€ â‰ˆ I (tol=1E-06).

------------ TASK B: Hydrogen atom, s-wave radial SchrÃ¶dinger equation on a grid -----------

------ Calculate numerically the lowest egenvalues and eigenfunctions ------
------ of the s-wave states in the hydrogen atom                      ------
------ and compare them with the exact results                        ------

Numerically calculated lowest eigenvalues:
Îµ_0 = -0.489228
Îµ_1 = -0.111120
Îµ_2 = 0.096284
Îµ_3 = 0.411759
Îµ_4 = 0.829649

numerically_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the numerically calculated eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg is a plot of the numerically calculated eigenfunctions.

analytic_eigenfunctions_ni.txt (for i = 1, 2, 3) contains the data for the (exact) analytically computed eigenfunctions with n = 1, 2, 3, respectively.
eigenfunctions.svg also contains the exact results for comparison.

------ Fix r_max and calculate Îµâ‚€ for several different values of Î”r ------
------ and plot the resulting curve                                  ------

r_max is fixed to 10.
varying_dr.txt contains the data for the calculated Îµâ‚€.
varying_dr.svg is a plot of the resulting curve.

------ Fix Î”r and calculate Îµâ‚€ for several different values of r_max ------
------ and plot the resulting curve                                  ------


Î”r is fixed to 0.3.
varying_rmax.txt contains the data for the calculated Îµâ‚€.
varying_rmax.svg is a plot of the resulting curve.

------------ TASK C: Scaling and optimization ------------

------ Check that the number of operations for matrix diagonalization scales as O(nÂ³) ------
------ do the measurements in parallel                                                ------

The file 'number_of_operations.txt' contains timing data for Jacobi diagonalization of random matrices of size N.
The plot 'number_of_operations.svg' shows the data along with a fitted curve f(N) = a * NÂ³.


------------ POINTS: received from tasks A, B, and C ------------

Task A completed â†’ 6 pointsðŸ˜Š
Task B completed â†’ 3 pointsðŸ˜„
Task C completed â†’ 1 point ðŸ˜Ž

In total, this exercise results in 10 points ðŸŽ‰ðŸŽ‰ðŸŽ‰
