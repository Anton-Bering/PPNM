------------ TASK A: Solving linear equations using QR-decomposition ------------
------------ by modified Gram-Schmidt orthogonalization              ------------

------ Check that "decomp" works as intended ------

--- Generate a random tall (6x4) matrix A ---

Matrix A:
      0.88924      0.19859      0.50035      0.07621
      0.31360      0.08147      0.02950      0.05112
      0.05557      0.43401      0.68471      0.27905
      0.04980      0.13470      0.83656      0.70027
      0.10339      0.71968      0.81305      0.93758
      0.66843      0.08635      0.18257      0.23324

--- Factorize A into QR ---

Matrix Q:
      0.76473     -0.05037      0.09994     -0.37396
      0.26969     -0.00389     -0.19827      0.11173
      0.04779      0.50834      0.13150     -0.66124
      0.04283      0.14710      0.92999      0.29684
      0.08892      0.83926     -0.24869      0.38353
      0.57484     -0.11420     -0.08169      0.41860

Matrix R:
      1.16282      0.31398      0.63638      0.33284
      0.00000      0.82426      1.10733      1.00106
      0.00000      0.00000      0.69507      0.43320
      0.00000      0.00000      0.00000      0.45777


--- Check that R is upper triangular ---

TEST: Is R upperâ€‘triangular? RESULT: Yes.

--- Check that Qáµ€Q â‰ˆ I ---

Matrix Qáµ€Q:
      1.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      1.00000

TEST: is Qáµ€Q the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

--- Check that QR â‰ˆ A ---

Matrix QR:
      0.88924      0.19859      0.50035      0.07621
      0.31360      0.08147      0.02950      0.05112
      0.05557      0.43401      0.68471      0.27905
      0.04980      0.13470      0.83656      0.70027
      0.10339      0.71968      0.81305      0.93758
      0.66843      0.08635      0.18257      0.23324

TEST: is QR = A?
RESULT: Yes  (|maximum difference| = 1.110E-016)

------ Check that "solve" works as intended ------

--- Generate a random square matrix A (4Ã—4) ---

Matrix A:
      0.98979      0.27468      0.75306      0.13620
      0.31068      0.89880      0.89483      0.38388
      0.48506      0.40091      0.99183      0.94490
      0.38291      0.24590      0.00377      0.62133

--- Generate a random vector b (4) ---

Vector b:
      0.15656
      0.03134
      0.69736
      0.44267


--- Factorize A into QR --- 

Matrix Q:
      0.81969     -0.37483     -0.01965     -0.43270
      0.25729      0.91360     -0.09677     -0.29962
      0.40170      0.15427      0.67747      0.59655
      0.31710      0.03221     -0.72889      0.60591

Matrix R:
      1.20752      0.69542      1.24711      0.78699
      0.00000      0.78795      0.68838      0.46545
      0.00000      0.00000      0.56780      0.14744
      0.00000      0.00000      0.00000      0.76619


--- Solve QRx=b ---

Solving QRx=b leads to:

Vector x:
      0.12219
     -0.39286
      0.04728
      0.79235


--- Check that Axâ‰ˆb ---

Vector Ax:
      0.15656
      0.03134
      0.69736
      0.44267

TEST: is Ax=b (within a tolerance of 1E-12)?
RESULT: OK

------------ TASK B: Matrix inverse by Gram-Schmidt QR factorization ------------

------ Check that "inverse" works as intended ------

--- Generate a random square matrix A (4Ã—4) ---

Matrix A:
      0.02352      0.75076      0.98955      0.55728
      0.58854      0.03165      0.28360      0.74198
      0.70380      0.49117      0.29390      0.89105
      0.76475      0.61021      0.50618      0.73004


--- Factorize A into QR ---

Matrix Q:
      0.01969      0.89770      0.41995      0.13187
      0.49266     -0.38785      0.77101      0.11136
      0.58914      0.08853     -0.42990      0.67842
      0.64016      0.18940     -0.21064     -0.71411

Matrix R:
      1.19461      0.71038      0.65639      1.36882
      0.00000      0.82074      0.90020      0.42964
      0.00000      0.00000      0.40126      0.26927
      0.00000      0.00000      0.00000      0.23930


--- Calculate B, which is the inverse of A ---

Matrix B:
     -1.02428      0.47045     -2.24254      3.04087
      0.06298     -2.48119      1.88562      0.17222
      0.67678      1.60921     -2.97390      1.47763
      0.55108      0.46534      2.83503     -2.98414


--- Check that ABâ‰ˆI, where I is the identity matrix ---

Matrix AB:
      1.00000      0.00000      0.00000      0.00000
      0.00000      1.00000      0.00000      0.00000
      0.00000      0.00000      1.00000      0.00000
      0.00000      0.00000      0.00000      1.00000

TEST: is AB the identity matrix (within a tolerance of 1E-12)? 
RESULT: Yes.

------------ TASK C: Operations count for QR-decomposition ------------

------ Measure the time it takes to QR-factorize a random NxN matrix as function of N ------

QR_factorize_time.txt contains the data on how long it takes to QR-factorize a random NxN matrix.
QR_factorize_time.svg is a plot showing how long it takes to QR-factorize a random NxN matrix, using the data from QR_factorize_time.txt.
The time it takes to QR-factorize grows like O(NÂ³), as shown by the fit in QR_factorize_time.svg.

------------ POINTS: received from tasks A, B, and C ------------

Task A completed â†’ 6 pointsðŸ˜Š
Task B completed â†’ 3 pointsðŸ˜„
Task C completed â†’ 1 point ðŸ˜Ž

In total, this exercise results in 10 points ðŸŽ‰ðŸŽ‰ðŸŽ‰
