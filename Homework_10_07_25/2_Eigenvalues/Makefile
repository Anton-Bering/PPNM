############################################################################
#  Makefile â€“Â build everything and report points
############################################################################

# -------------------------------------------------------------------------
#  Tools
CSCOMP   := mcs
MONO     := mono
GNUPLOT  := gnuplot

# -------------------------------------------------------------------------
#  Sources and executables
SRC_MAIN := Main.cs Jacobi.cs Matrix.cs Vector.cs
MAIN_EXE := main.exe

SRC_OPS  := NumberOfOperations.cs Jacobi.cs Matrix.cs Vector.cs
OPS_EXE  := NumberOfOperations.exe

# -------------------------------------------------------------------------
#  Data files produced by the programmes
VARY_DR_TXT   := varying_dr.txt
VARY_RMAX_TXT := varying_rmax.txt
ANALYTIC_TXT  := analytic_eigenfunctions_n1.txt \
                 analytic_eigenfunctions_n2.txt \
                 analytic_eigenfunctions_n3.txt
NUMERICAL_TXT := numerically_eigenfunctions_n1.txt \
                 numerically_eigenfunctions_n2.txt \
                 numerically_eigenfunctions_n3.txt
OPS_TXT       := number_of_operations.txt

PLOT_DATA := $(VARY_DR_TXT) $(VARY_RMAX_TXT) \
             $(ANALYTIC_TXT) $(NUMERICAL_TXT) $(OPS_TXT)

# -------------------------------------------------------------------------
#  Figures (all generated by plot.gnu)
SVG := varying_dr.svg \
       varying_rmax.svg \
       eigenfunctions.svg \
       number_of_operations.svg

PLOT_DRIVER := plot.gnu     # master gnuplot script

# -------------------------------------------------------------------------
#  1. Default target â€“ build everything, then show points
all: points

# points depends on all SVGs, so they (and their prerequisites) build first
points: $(SVG)
	@echo "" | tee -a Out.txt
	@echo "------------------------------------------------" | tee -a Out.txt
	@echo "" | tee -a Out.txt
	@echo "Task A completed â†’ 6 pointsðŸ˜Š" | tee -a Out.txt
	@echo "Task B completed â†’ 3 pointsðŸ˜„" | tee -a Out.txt
	@echo "Task C completed â†’ 1 point ðŸ˜Ž" | tee -a Out.txt
	@echo "" | tee -a Out.txt
	@echo "In total, this exercise results in 10 pointsðŸŽ‰" | tee -a Out.txt

# -------------------------------------------------------------------------
#  2. Build rules ----------------------------------------------------------

# -- compile main programme -----------------------------------------------
$(MAIN_EXE): $(SRC_MAIN)
	$(CSCOMP) -optimize -target:exe -out:$@ $^

# -- compile O(n^3) timing programme --------------------------------------
$(OPS_EXE): $(SRC_OPS)
	$(CSCOMP) -optimize -target:exe -out:$@ $^

# -- run main programme whenever any of its output files are missing -------
$(VARY_DR_TXT) \
$(VARY_RMAX_TXT) \
$(ANALYTIC_TXT) \
$(NUMERICAL_TXT): $(MAIN_EXE)
	$(MONO) $(MAIN_EXE)

# -- generate numberâ€‘ofâ€‘operations data ------------------------------------
$(OPS_TXT): $(OPS_EXE)
	@echo "n   seconds" > $@
	@/usr/bin/time -f "real: %e\nuser: %U\nsys: %S" \
		-o number_of_operations_time.txt \
		sh -c 'for n in 30 40 50 60 70 80 90 100 110 120; do \
		        ( $(MONO) $(OPS_EXE) $$n >> $@ ) & \
		      done; wait'
	@echo "Numberâ€‘ofâ€‘operations test complete â†’ $@"

# -- draw every figure in one gnuplot invocation ---------------------------
$(SVG): $(PLOT_DRIVER) $(PLOT_DATA)
	$(GNUPLOT) $(PLOT_DRIVER)

# -------------------------------------------------------------------------
#  3. Houseâ€‘keeping --------------------------------------------------------
.PHONY: clean points
clean:
	rm -f $(MAIN_EXE) $(OPS_EXE) \
	      $(PLOT_DATA) number_of_operations_time.txt \
	      $(SVG) Out.txt fit.log
	@echo "Cleaned build artefacts."

############################################################################
#  End of Makefile
############################################################################
